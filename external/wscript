#!/bin/env python
# -*- coding: utf-8 -*-

import os
from glob import glob

def stlib_from_dir(bld, target, sourcedir, **kwargs):
	files = os.listdir(os.path.join('external', sourcedir))

	sources = [os.path.join(sourcedir, f) for f in files if f.endswith('.cpp') or f.endswith('.c')]

	if len(sources) == 0:
		print "WARNING: No sources for %s found in %s" % (target, sourcedir)

	obj = bld.stlib(
		source=sources,
		target=target,
		**kwargs
	)

def libjpeg(bld):
	sources = map(lambda x: os.path.join('downloads', 'jpeg-6b', x), [
		"jcapimin.c",
		"jcapistd.c",
		"jdapimin.c",
		"jdapistd.c",
		"jcomapi.c",
		"jcparam.c",
		"jctrans.c",
		"jdtrans.c",

		# Compression side of the library:
		"jcinit.c",
		"jcmaster.c",
		"jcmainct.c",
		"jcprepct.c",
		"jccoefct.c",
		"jccolor.c",
		"jcsample.c",
		"jcdctmgr.c",
		"jfdctint.c",
		"jfdctfst.c",
		"jfdctflt.c",
		"jchuff.c",
		"jcphuff.c",
		"jcmarker.c",
		"jdatadst.c",

		# Decompression side of the library:
		"jdmaster.c",
		"jdinput.c",
		"jdmainct.c",
		"jdcoefct.c",
		"jdpostct.c",
		"jdmarker.c",
		"jdhuff.c",
		"jdphuff.c",
		"jddctmgr.c",
		"jidctint.c",
		"jidctfst.c",
		"jidctflt.c",
		"jidctred.c",
		"jdsample.c",
		"jdcolor.c",
		"jdmerge.c",
		"jquant1.c",
		"jquant2.c",
		"jdatasrc.c",

		# Support files for both compression and decompression:
		"jerror.c",
		"jmemmgr.c",
		"jutils.c",
		"jmemmgr.c",
		"jmemnobs.c",
	])

	obj = bld.stlib(
		source=sources,
		target="jpeg",
		export_includes='downloads/jpeg-6b',
	)

def liblua(bld):
	core = [
		'lapi.c',
		'lcode.c',
		'lctype.c',
		'ldebug.c',
		'ldo.c',
		'ldump.c',
		'lfunc.c',
		'lgc.c',
		'llex.c',
		'lmem.c',
		'lobject.c',
		'lopcodes.c',
		'lparser.c',
		'lstate.c',
		'lstring.c',
		'ltable.c',
		'ltm.c',
		'lundump.c',
		'lvm.c',
		'lzio.c',
	]

	lib = [
		'lauxlib.c',
		'lbaselib.c',
		'lbitlib.c',
		'lcorolib.c',
		'ldblib.c',
		'liolib.c',
		'lmathlib.c',
		'loslib.c',
		'lstrlib.c',
		'ltablib.c',
		'loadlib.c',
		'linit.c',
	]

	sources = map(lambda x: os.path.join('downloads', 'lua-5.2.3', 'src', x), core + lib)

	obj = bld.stlib(
		source=sources,
		target="lua",
		export_includes='downloads/lua-5.2.3/src',
	)

def build(bld):
	stlib_from_dir(
		bld,
		'boost_filesystem',
		'downloads/boost_1_55_0/libs/filesystem/src',
		includes='downloads/boost_1_55_0',
		export_includes='downloads/boost_1_55_0',
	)

	stlib_from_dir(
		bld,
		'boost_system',
		'downloads/boost_1_55_0/libs/system/src',
		includes='downloads/boost_1_55_0',
		export_includes='downloads/boost_1_55_0',
	)

	stlib_from_dir(
		bld,
		'glew',
		'downloads/glew-1.5.8/src',
		use=['gl'],
		includes='downloads/glew-1.5.8/include',
		export_includes='downloads/glew-1.5.8/include',
	)

	libjpeg(bld)
	liblua(bld)
